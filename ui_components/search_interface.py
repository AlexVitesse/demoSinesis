# Importaci√≥n de bibliotecas y m√≥dulos necesarios:
# - streamlit: Framework para crear interfaces web interactivas
# - pathlib: Para manejo de rutas de archivos de manera multiplataforma
# - vector_store: M√≥dulo personalizado para gesti√≥n de almacenes vectoriales
# - document_db: M√≥dulo personalizado para gesti√≥n de base de datos de documentos
import streamlit as st
from pathlib import Path
from vector_store import VectorStoreManager
from document_db import DocumentDB


class SearchInterface:
    """Maneja la interfaz de b√∫squeda sem√°ntica
    
    Responsabilidades principales:
    - Mostrar la interfaz de b√∫squeda al usuario
    - Recoger par√°metros de b√∫squeda
    - Ejecutar b√∫squedas sem√°nticas en el almac√©n vectorial
    - Presentar resultados de manera clara y organizada
    
    Dependencias:
    - Requiere instancias configuradas de DocumentDB y VectorStoreManager
    - Asume que el almac√©n vectorial ya contiene documentos indexados
    """
    
    def __init__(self, db: DocumentDB, vs_manager: VectorStoreManager):
        """Inicializa la interfaz de b√∫squeda
        
        Args:
            db (DocumentDB): Instancia de la base de datos para acceder a estados y metadatos
            vs_manager (VectorStoreManager): Gestor del almac√©n vectorial para realizar b√∫squedas
        """
        self.db = db  # Almacena referencia a la base de datos de documentos
        self.vs_manager = vs_manager  # Gestor del almac√©n vectorial
    
    def show_search_interface(self) -> None:
        """Muestra la interfaz de b√∫squeda
        
        Flujo principal:
            1. Verifica si hay documentos indexados
            2. Recoge par√°metros de b√∫squeda del usuario
            3. Ejecuta y muestra resultados si hay consulta
            
        Efectos secundarios:
            - Modifica la interfaz de usuario mostrando widgets y resultados
            - Realiza llamadas al almac√©n vectorial para b√∫squedas
        """
        st.title("üîç B√∫squeda Sem√°ntica")  # T√≠tulo principal de la secci√≥n
        
        # Verificaci√≥n inicial de estado
        if not self._check_vectorstore_exists():
            st.warning("No hay documentos indexados para buscar")
            return  # Salida temprana si no hay documentos
        
        # Obtenci√≥n de par√°metros de b√∫squeda
        query, k = self._get_search_params()
        
        # Ejecuci√≥n de b√∫squeda si hay consulta
        if query:
            self._perform_search(query, k)
    
    def _check_vectorstore_exists(self) -> bool:
        """Verifica si existe el vectorstore
        
        Returns:
            bool: True si hay documentos indexados, False en caso contrario
            
        Prop√≥sito:
            - Evitar b√∫squedas innecesarias cuando no hay datos
            - Proporcionar feedback claro al usuario
            
        Implementaci√≥n:
            - Consulta el estado almacenado en la base de datos
            - Valor por defecto False si no existe el estado
        """
        return self.db.get_state("vectorstore_exists", False)
    
    def _get_search_params(self):
        """Obtiene los par√°metros de b√∫squeda del usuario
        
        Returns:
            Tuple (query, k):
            - query: Texto de b√∫squeda ingresado por el usuario
            - k: N√∫mero de resultados a retornar (1-10)
            
        Widgets mostrados:
            - Campo de texto para consulta
            - Slider para seleccionar cantidad de resultados
            
        Consideraciones:
            - El placeholder gu√≠a al usuario sobre qu√© ingresar
            - El slider limita resultados para evitar sobrecarga
        """
        # Widget para ingresar texto de b√∫squeda
        query = st.text_input(
            "Ingresa tu consulta de b√∫squeda", 
            placeholder="Buscar en los documentos..."
        )
        # Widget para seleccionar cantidad de resultados
        k = st.slider("N√∫mero de resultados", min_value=1, max_value=10, value=3)
        
        return query, k
    
    def _perform_search(self, query: str, k: int):
        """Realiza la b√∫squeda y muestra los resultados
        
        Args:
            query (str): Texto de b√∫squeda ingresado por el usuario
            k (int): Cantidad de resultados a retornar
            
        Flujo:
            1. Muestra spinner durante la operaci√≥n
            2. Delega la b√∫squeda al VectorStoreManager
            3. Muestra resultados o errores
            
        Manejo de errores:
            - Captura excepciones durante la b√∫squeda
            - Muestra mensaje de error claro al usuario
        """
        # Bloque de b√∫squeda con feedback visual
        with st.spinner("Buscando..."):
            try:
                # Ejecuta b√∫squeda sem√°ntica en el almac√©n vectorial
                results = self.vs_manager.similarity_search(query, k=k)
                # Muestra resultados formateados
                self._display_search_results(results)
                
            except Exception as e:
                st.error(f"Error en la b√∫squeda: {str(e)}")  # Feedback de error
    
    def _display_search_results(self, results):
        """Muestra los resultados de b√∫squeda
        
        Args:
            results: Lista de tuplas (documento, score) retornadas por la b√∫squeda
            
        Formato de visualizaci√≥n:
            - Resultados expandibles/collapsibles
            - Ordenados por relevancia (score)
            - Metadatos claros (nombre archivo, p√°gina)
            - Contenido legible
            
        Dise√±o:
            - Usa expanders para evitar saturar la pantalla
            - Muestra score de similitud con 2 decimales
            - Extrae nombre de archivo legible de la ruta
        """
        st.subheader("Resultados")  # Encabezado de secci√≥n
        
        # Iteraci√≥n sobre resultados con √≠ndice
        for i, (doc, score) in enumerate(results):
            # Extracci√≥n y formateo del nombre de archivo
            source_path = doc.metadata.get('source', '')
            file_name = Path(source_path).name if source_path else 'Desconocido'
            
            # Contenedor expandible para cada resultado
            with st.expander(f"Resultado #{i+1} (Similitud: {score:.2f}) - {file_name}"):
                # Metadatos del documento
                st.write(f"**P√°gina:** {doc.metadata.get('page', 'N/A')}")
                # Contenido principal con formato
                st.write(f"**Contenido:**\n{doc.page_content}")